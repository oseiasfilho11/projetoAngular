{"version":3,"file":"browser.d.ts","sources":["browser.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ErrorHandler, ModuleWithProviders, PlatformRef, StaticProvider } from '@angular/core';\nexport declare const INTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[];\n/**\n * @security Replacing built-in sanitization providers exposes the application to XSS risks.\n * Attacker-controlled data introduced by an unsanitized provider could expose your\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n * @publicApi\n */\nexport declare const BROWSER_SANITIZATION_PROVIDERS: StaticProvider[];\n/**\n * @publicApi\n */\nexport declare const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef;\nexport declare function initDomAdapter(): void;\nexport declare function errorHandler(): ErrorHandler;\nexport declare function _document(): any;\nexport declare const BROWSER_MODULE_PROVIDERS: StaticProvider[];\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\nexport declare class BrowserModule {\n    constructor(parentModule: BrowserModule | null);\n    /**\n     * Configures a browser-based app to transition from a server-rendered app, if\n     * one is present on the page.\n     *\n     * @param params An object containing an identifier for the app to transition.\n     * The ID must match between the client and server versions of the app.\n     * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n     */\n    static withServerTransition(params: {\n        appId: string;\n    }): ModuleWithProviders<BrowserModule>;\n}\n"]}